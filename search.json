[{"content":"FPGA-Based Music Player with Waveform Display Project Description: In my Digital System Design course, I developed a music player on an FPGA using Verilog, building modules that read and played notes stored in ROM. The project included a Note Player module that generated accurate frequencies, a Sine Reader to read audio wave samples, and a Song Reader module that managed note sequences through a finite state machine (FSM) for precise playback timing. I also added a microcontroller unit (MCU) to coordinate playback order and synchronization. I extended the music player with a visual waveform display, capturing audio samples and rendering them on a raster display using VGA output, effectively turning the FPGA into a fully functioning audio player with real-time graphics.\nWhat I Learned: This project strengthened my Verilog programming skills, particularly in digital signal processing and control logic. Designing FSMs for the Song Reader taught me how to control complex timing flows, and I gained experience managing real-time audio data through precise synchronization. Implementing the waveform display required an understanding of real-time data processing and graphics programming, including memory management and double buffering techniques to avoid display artifacts. Working on this project helped me develop a comprehensive skill set in digital design, FPGA programming, and the integration of audio and visual outputs—essential abilities for designing complex, resource-efficient digital systems.\n","description":"A detailed description of projects I was tasked with developing in my Digital Systems Design class...","tags":["FPGA","Digital Design","timing"],"title":"Digital Systems Work","uri":"/post/2020/jan/who-am-i/"},{"content":"Project Description: In this project, I designed and built a “Magic Mirror” dashboard that functions as both a smart display and a mirror. Using a Raspberry Pi, I set up the mirror to display essential information, like the time, weather, and calendar events, on a TV monitor with a reflective film. This setup creates the illusion that the information is floating on the mirror’s surface. Additionally, I integrated a voice assistant to enable hands-free control, making the mirror interactive and adaptable to user commands. The final product is a visually engaging, practical dashboard with a modern interface.\nWhat I Learned: Through this project, I not only developed technical skills but also learned strategies for minimizing costs. I sourced affordable materials and focused on maximizing the functionality of the Raspberry Pi and the TV, keeping the project budget-friendly without sacrificing quality. I also learned to use Git more effectively, incorporating and managing Git modules to streamline the software side of the build, which made it easier to add and update different functionalities. This project gave me hands-on experience in IoT design, cost management, and version control, all of which will be invaluable in future projects that balance creativity with practical, scalable solutions.\n","description":"My magic mirror is a TV screen with a reflective film over it connected to a raspberry pi...","tags":["markdown"],"title":"Magic Mirror Dashboard","uri":"/post/2020/jan/markdown/"},{"content":"Project Description: In this project, I designed and built a custom mechanical keyboard, creating the PCB layout from scratch in KiCad. The design includes various components like diodes, rotary encoders, a sliding potentiometer, multiplexers, and an OLED display, all powered by a Raspberry Pi Pico. The keyboard uses MX Key Switches for a responsive typing experience, and I customized the plate and case using Fusion 360 to achieve a unique look and feel. The result is a fully functional, programmable keyboard tailored to my specifications, with advanced features like volume control and custom display readouts.\nWhat I Learned: This project taught me a great deal about PCB design and hardware integration. I became proficient with KiCad, learning to route complex circuits and incorporate multiple components like encoders and multiplexers into a cohesive design. Designing a custom case and plate in Fusion 360 deepened my understanding of 3D modeling and its role in electronics projects. Additionally, working with the Raspberry Pi Pico gave me hands-on experience with microcontroller-based keyboards, helping me understand how to balance power requirements and component placement. This project strengthened my skills in electronics design, 3D modeling, and embedded systems, giving me a strong foundation for future hardware development projects. To view more about basic syntaxs, click here.\n","description":"Designed and created a Mechanical keyboard pcb and case with custom features taylored to my needs...","tags":["Keyboard","PCB","Ki Cad"],"title":"Mechanical Keyboard Build","uri":"/post/2020/jan/syntax/"},{"content":"Project Description: For this project, I built an AI-powered voice assistant on a Raspberry Pi 4 using Google’s Gemini API to handle speech recognition and response. The assistant includes both text-to-speech and speech-to-text functionalities, allowing it to interact with users and automate home processes like controlling lights and playing music. To enhance user experience and privacy, I developed a custom wake word feature using a PyTorch-based model called Porcupine, which ensures that the assistant listens only after hearing its designated wake word. This setup provides a seamless and responsive voice interface for smart home automation.\nWhat I Learned: This project taught me a lot about the practical implementation of AI-driven speech recognition. I gained experience working with Google’s Gemini API, which deepened my understanding of cloud-based AI services. Implementing the wake word feature with PyTorch allowed me to explore custom machine learning models on resource-constrained hardware like the Raspberry Pi, teaching me about the balance between model efficiency and performance. Additionally, I enhanced my skills in creating reliable text-to-speech and speech-to-text workflows. Overall, this project strengthened my knowledge in AI, edge computing, and home automation, while also highlighting the importance of optimizing AI models for responsiveness and privacy.\n","description":"A voice assistant capable of text-to-speech and responding. Serves as a voice assitant and home automator...","tags":["Voice Assistant","Raspberry Pi","Google Cloud","Home Automation","API"],"title":"Gemini AI-Powered Voice Assistant","uri":"/post/2020/jan/use-this-theme/"},{"content":"Project Description: I developed a weather station using an ESP32 microcontroller that fetches live weather data from the OpenWeather API and displays it on an OLED or LCD screen, with code options for both display types. The device allows users to scroll through various cities using a scroll wheel, selecting each location for updated weather conditions. It also features custom animations that reflect the current weather—like raindrops, sunshine, or clouds—adding a visually engaging element to the interface. This compact weather station is a practical tool for checking local and international weather in real time.\nWhat I Learned: This project helped me deepen my understanding of API integration with microcontrollers. I learned how to handle HTTP requests on the ESP32 to pull data from the OpenWeather API and parse the JSON responses for relevant information. Coding for both OLED and LCD screens taught me how to adapt the display output for different formats and sizes, improving my flexibility in display interfacing. Additionally, implementing animations based on weather conditions gave me valuable experience in graphics programming for embedded displays. Overall, this project strengthened my skills in IoT, API integration, and UI design on constrained hardware.\n","description":"Uses an ESP32 to send API request to OpenWeather API to retrieve live weather for a given latitude and longitude...","tags":["Arduino","ESP32","API"],"title":"ESP32 Weather Station","uri":"/post/2020/jan/netlify-conf/"},{"content":"Project Description: For this project, I designed and built an AC-DC converter circuit that rectifies an AC signal and outputs a stable DC voltage. Using diodes, I created a rectifier to convert the AC input into a pulsating DC signal, which is then smoothed and stored in a capacitor. To maintain a stable DC output at the desired RMS voltage, I used a Zener diode to regulate the discharge, ensuring a consistent voltage level. This approach results in a reliable DC output that approximates the RMS value of the original AC input.\nWhat I Learned: This project deepened my understanding of rectification and voltage regulation. Working with diodes taught me about the principles of AC-DC conversion, including the importance of selecting appropriate diode ratings for effective rectification. I also gained insight into capacitive filtering for smoothing DC output and the role of Zener diodes in voltage stabilization. This hands-on experience helped me appreciate the design considerations in power electronics and improved my skills in analyzing and building circuits for efficient signal conversion.\nSome Satisfying (to some) Soldering Rectifying the signal In the above videos you see a diamond shape of diodes (they are covered by the capacitor in the topmost picture). These diodes are in charge of rectifying the signal. Since the sinusoidal behavior of the AC signal dips into the negatives, the diodes are responsible for enforcing only a positive voltage reading based off their configuration. After rectifying the output is shown below\nDischarging on ","description":"The AC-DC converter uses diodes, a capacitor, and a zener diode to convert the AC signal from a wall outlet...","tags":["Circuits","Testing","Soldering"],"title":"AC-DC Converter","uri":"/post/2020/jan/extra/"},{"content":"Project Description: In this project, I created an ultrasonic ruler using Arduino that measures the distance to an object and displays the result in centimeters on a 16x2 LCD screen. The device utilizes an HC-SR04 ultrasonic sensor to send out sound waves and record the time it takes for them to reflect back. Using these measurements, the Arduino calculates the distance to the object and displays it clearly on the LCD. This setup allows for easy, real-time distance readings and serves as a compact digital ruler that showcases the capabilities of ultrasonic sensing.\nWhat I Learned: Through building this project, I gained a deep understanding of the timing mechanics behind ultrasonic sensors. I learned to precisely control the timing of the sound waves emitted and received by the sensor, which is crucial for accurate distance calculations. Working with the 16x2 LCD interface taught me how to structure and format data for clear display output, control the screen, and ensure that measurements are updated in real time. This project helped me develop a solid foundation in signal timing and display interfacing—both essential skills in embedded systems and hardware projects.\n","description":"The UltraSonic ruler is a device that sends out ultrasonic waves to then measure the time it takes to get back...","tags":["Arduino","C++","Microcontrollers"],"title":"Arduino Ultrasonic Ruler","uri":"/post/2020/jan/build-hugo-blog/"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube privacy enhanced shortcode The youtube shortcode embeds a responsive video player for YouTube videos. Only the ID of the video is required, e.g.:\nYouTube URL:\nhttps://www.youtube.com/watch?v=3qHkcs3kG44 Shortcode:\n{{\u003c youtube 3qHkcs3kG44 \u003e}} Rendered output: Twitter You want to include a single tweet into your blog post? Everything you need is the URL of the tweet:\nTwitter url:\nhttps://twitter.com/binovarghese_/status/1758148486510317907 Shortcode:\n{{\u003c twitter user=\"binovarghese_\" id=\"1758148486510317907\" \u003e}} Rendered: I’m a night owl who loves the dark hours. I often go for walks at night, enjoying the city lights, the yellow glow, and the people around me.\nHere are some photos I took from the night walks in Bahrain#photography #Bahrainhttps://t.co/OzoJjNRH67\n— Bino⚡ (@binovarghese_) February 15, 2024 ","description":"A detailed list of most of my work with my autonomous robot team at Stanford...","tags":["PCB","Testing"],"title":"RoboSub Work","uri":"/post/2020/jan/rich-content/"},{"content":"Articles about learn in public, brag document and free stuffs.\nLearn In Public If there’s a golden rule, it’s this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\nA habit of creating learning exhaust:\nWrite blogs and tutorials and cheatsheets. Speak at meetups and conferences. Ask and answer things on Stackoverflow or Reddit. Avoid the walled gardens like Slack and Discord, they’re not public. Make Youtube videos or Twitch streams. Start a newsletter. Draw cartoons. Link Make Free Stuff The best growth hack is still to build something people enjoy, then attaching no strings to it. You’d be surprised how far that can get you.\nMake free stuff! The web is still for everyone.\nLink\nHow to hone your new superpower: teaching I learned early in my developer journey that teaching others is an effective way to quickly deepen my understanding of a new concept or technology. I’ve found that needing to articulate a particular concept to others causes me to revisit my assumptions and leads me to do additional research to fill any knowledge gaps.\nLink\nYour future self will thank you: Building your personal documentation. Developers can take a DRY approach to how they search for answers to questions they encounter multiple times. By relying on an internal database (or “second brain”) they can reduce their reliance on external search engines.\nLink\nBrag now, remember later: Document your accomplishments Given five minutes notice to summarize your recent professional and personal accomplishments and wins, how detailed would your response be? Would that be enough time for you to sufficiently capture some of the things you’re most proud of from the past few months or years?\nLink\nThe most successful developers share more than they take One of the questions I always ask successful bloggers is: what motivated you to start? The answer is always the same: I did it for myself. Whatever your work, you should embrace the philosophy of “public by default”.\nPublic-by-default means this: everytime you create something, learn something, or just notice something’s interesting, do it in public. This may seem daunting—writing blog posts, helping the community and transforming ideas from thoughts into words all takes time. But sharing is like a muscle, and by committing to a regular schedule, you become much more efficient. This consistency of volume is also key to reaping the benefits of sharing.\nTo truly embrace public-by-default, it’s not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.\nLink\n","description":"Articles about learning in public, brag document and free stuffs.","tags":["newsletter"],"title":"Collections No.1","uri":"/collections/2023/collections/"},{"content":"Articles about learn in public, brag document and free stuffs.\nLearn In Public If there’s a golden rule, it’s this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\nA habit of creating learning exhaust:\nWrite blogs and tutorials and cheatsheets. Speak at meetups and conferences. Ask and answer things on Stackoverflow or Reddit. Avoid the walled gardens like Slack and Discord, they’re not public. Make Youtube videos or Twitch streams. Start a newsletter. Draw cartoons. Link Make Free Stuff The best growth hack is still to build something people enjoy, then attaching no strings to it. You’d be surprised how far that can get you.\nMake free stuff! The web is still for everyone.\nLink\nHow to hone your new superpower: teaching I learned early in my developer journey that teaching others is an effective way to quickly deepen my understanding of a new concept or technology. I’ve found that needing to articulate a particular concept to others causes me to revisit my assumptions and leads me to do additional research to fill any knowledge gaps.\nLink\nYour future self will thank you: Building your personal documentation. Developers can take a DRY approach to how they search for answers to questions they encounter multiple times. By relying on an internal database (or “second brain”) they can reduce their reliance on external search engines.\nLink\nBrag now, remember later: Document your accomplishments Given five minutes notice to summarize your recent professional and personal accomplishments and wins, how detailed would your response be? Would that be enough time for you to sufficiently capture some of the things you’re most proud of from the past few months or years?\nLink\nThe most successful developers share more than they take One of the questions I always ask successful bloggers is: what motivated you to start? The answer is always the same: I did it for myself. Whatever your work, you should embrace the philosophy of “public by default”.\nPublic-by-default means this: everytime you create something, learn something, or just notice something’s interesting, do it in public. This may seem daunting—writing blog posts, helping the community and transforming ideas from thoughts into words all takes time. But sharing is like a muscle, and by committing to a regular schedule, you become much more efficient. This consistency of volume is also key to reaping the benefits of sharing.\nTo truly embrace public-by-default, it’s not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.\nLink\n","description":"Articles about learning in public, brag document and free stuffs.","tags":["newsletter"],"title":"Collections No.2","uri":"/collections/2023/collections2/"},{"content":"Articles about learn in public, brag document and free stuffs.\nLearn In Public If there’s a golden rule, it’s this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\nA habit of creating learning exhaust:\nWrite blogs and tutorials and cheatsheets. Speak at meetups and conferences. Ask and answer things on Stackoverflow or Reddit. Avoid the walled gardens like Slack and Discord, they’re not public. Make Youtube videos or Twitch streams. Start a newsletter. Draw cartoons. Link Make Free Stuff The best growth hack is still to build something people enjoy, then attaching no strings to it. You’d be surprised how far that can get you.\nMake free stuff! The web is still for everyone.\nLink\nHow to hone your new superpower: teaching I learned early in my developer journey that teaching others is an effective way to quickly deepen my understanding of a new concept or technology. I’ve found that needing to articulate a particular concept to others causes me to revisit my assumptions and leads me to do additional research to fill any knowledge gaps.\nLink\nYour future self will thank you: Building your personal documentation. Developers can take a DRY approach to how they search for answers to questions they encounter multiple times. By relying on an internal database (or “second brain”) they can reduce their reliance on external search engines.\nLink\nBrag now, remember later: Document your accomplishments Given five minutes notice to summarize your recent professional and personal accomplishments and wins, how detailed would your response be? Would that be enough time for you to sufficiently capture some of the things you’re most proud of from the past few months or years?\nLink\nThe most successful developers share more than they take One of the questions I always ask successful bloggers is: what motivated you to start? The answer is always the same: I did it for myself. Whatever your work, you should embrace the philosophy of “public by default”.\nPublic-by-default means this: everytime you create something, learn something, or just notice something’s interesting, do it in public. This may seem daunting—writing blog posts, helping the community and transforming ideas from thoughts into words all takes time. But sharing is like a muscle, and by committing to a regular schedule, you become much more efficient. This consistency of volume is also key to reaping the benefits of sharing.\nTo truly embrace public-by-default, it’s not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.\nLink\n","description":"Articles about learning in public, brag document and free stuffs.","tags":["newsletter"],"title":"Collections No.3","uri":"/collections/2023/collections3/"},{"content":"Articles about learn in public, brag document and free stuffs.\nLearn In Public If there’s a golden rule, it’s this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\nA habit of creating learning exhaust:\nWrite blogs and tutorials and cheatsheets. Speak at meetups and conferences. Ask and answer things on Stackoverflow or Reddit. Avoid the walled gardens like Slack and Discord, they’re not public. Make Youtube videos or Twitch streams. Start a newsletter. Draw cartoons. Link Make Free Stuff The best growth hack is still to build something people enjoy, then attaching no strings to it. You’d be surprised how far that can get you.\nMake free stuff! The web is still for everyone.\nLink\nHow to hone your new superpower: teaching I learned early in my developer journey that teaching others is an effective way to quickly deepen my understanding of a new concept or technology. I’ve found that needing to articulate a particular concept to others causes me to revisit my assumptions and leads me to do additional research to fill any knowledge gaps.\nLink\nYour future self will thank you: Building your personal documentation. Developers can take a DRY approach to how they search for answers to questions they encounter multiple times. By relying on an internal database (or “second brain”) they can reduce their reliance on external search engines.\nLink\nBrag now, remember later: Document your accomplishments Given five minutes notice to summarize your recent professional and personal accomplishments and wins, how detailed would your response be? Would that be enough time for you to sufficiently capture some of the things you’re most proud of from the past few months or years?\nLink\nThe most successful developers share more than they take One of the questions I always ask successful bloggers is: what motivated you to start? The answer is always the same: I did it for myself. Whatever your work, you should embrace the philosophy of “public by default”.\nPublic-by-default means this: everytime you create something, learn something, or just notice something’s interesting, do it in public. This may seem daunting—writing blog posts, helping the community and transforming ideas from thoughts into words all takes time. But sharing is like a muscle, and by committing to a regular schedule, you become much more efficient. This consistency of volume is also key to reaping the benefits of sharing.\nTo truly embrace public-by-default, it’s not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.\nLink\n","description":"Articles about learning in public, brag document and free stuffs.","tags":["newsletter"],"title":"Collections No.4","uri":"/collections/2023/collections4/"},{"content":"Articles about learn in public, brag document and free stuffs.\nLearn In Public If there’s a golden rule, it’s this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\nA habit of creating learning exhaust:\nWrite blogs and tutorials and cheatsheets. Speak at meetups and conferences. Ask and answer things on Stackoverflow or Reddit. Avoid the walled gardens like Slack and Discord, they’re not public. Make Youtube videos or Twitch streams. Start a newsletter. Draw cartoons. Link Make Free Stuff The best growth hack is still to build something people enjoy, then attaching no strings to it. You’d be surprised how far that can get you.\nMake free stuff! The web is still for everyone.\nLink\nHow to hone your new superpower: teaching I learned early in my developer journey that teaching others is an effective way to quickly deepen my understanding of a new concept or technology. I’ve found that needing to articulate a particular concept to others causes me to revisit my assumptions and leads me to do additional research to fill any knowledge gaps.\nLink\nYour future self will thank you: Building your personal documentation. Developers can take a DRY approach to how they search for answers to questions they encounter multiple times. By relying on an internal database (or “second brain”) they can reduce their reliance on external search engines.\nLink\nBrag now, remember later: Document your accomplishments Given five minutes notice to summarize your recent professional and personal accomplishments and wins, how detailed would your response be? Would that be enough time for you to sufficiently capture some of the things you’re most proud of from the past few months or years?\nLink\nThe most successful developers share more than they take One of the questions I always ask successful bloggers is: what motivated you to start? The answer is always the same: I did it for myself. Whatever your work, you should embrace the philosophy of “public by default”.\nPublic-by-default means this: everytime you create something, learn something, or just notice something’s interesting, do it in public. This may seem daunting—writing blog posts, helping the community and transforming ideas from thoughts into words all takes time. But sharing is like a muscle, and by committing to a regular schedule, you become much more efficient. This consistency of volume is also key to reaping the benefits of sharing.\nTo truly embrace public-by-default, it’s not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.\nLink\n","description":"Articles about learning in public, brag document and free stuffs.","tags":["newsletter"],"title":"Collections No.5","uri":"/collections/2023/collections5/"},{"content":"Articles about learn in public, brag document and free stuffs.\nLearn In Public If there’s a golden rule, it’s this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\nA habit of creating learning exhaust:\nWrite blogs and tutorials and cheatsheets. Speak at meetups and conferences. Ask and answer things on Stackoverflow or Reddit. Avoid the walled gardens like Slack and Discord, they’re not public. Make Youtube videos or Twitch streams. Start a newsletter. Draw cartoons. Link Make Free Stuff The best growth hack is still to build something people enjoy, then attaching no strings to it. You’d be surprised how far that can get you.\nMake free stuff! The web is still for everyone.\nLink\nHow to hone your new superpower: teaching I learned early in my developer journey that teaching others is an effective way to quickly deepen my understanding of a new concept or technology. I’ve found that needing to articulate a particular concept to others causes me to revisit my assumptions and leads me to do additional research to fill any knowledge gaps.\nLink\nYour future self will thank you: Building your personal documentation. Developers can take a DRY approach to how they search for answers to questions they encounter multiple times. By relying on an internal database (or “second brain”) they can reduce their reliance on external search engines.\nLink\nBrag now, remember later: Document your accomplishments Given five minutes notice to summarize your recent professional and personal accomplishments and wins, how detailed would your response be? Would that be enough time for you to sufficiently capture some of the things you’re most proud of from the past few months or years?\nLink\nThe most successful developers share more than they take One of the questions I always ask successful bloggers is: what motivated you to start? The answer is always the same: I did it for myself. Whatever your work, you should embrace the philosophy of “public by default”.\nPublic-by-default means this: everytime you create something, learn something, or just notice something’s interesting, do it in public. This may seem daunting—writing blog posts, helping the community and transforming ideas from thoughts into words all takes time. But sharing is like a muscle, and by committing to a regular schedule, you become much more efficient. This consistency of volume is also key to reaping the benefits of sharing.\nTo truly embrace public-by-default, it’s not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.\nLink\n","description":"Articles about learning in public, brag document and free stuffs.","tags":["newsletter"],"title":"Collections No.6","uri":"/collections/2023/collections6/"},{"content":"Journaling is not just a little thing you do to pass the time, to write down your memories—though it can be—it’s a strategy that has helped brilliant, powerful and wise people become better at what they do.\n","title":"Note 1","uri":"/notes/2020/change/"},{"content":"Journaling is not just a little thing you do to pass the time, to write down your memories—though it can be—it’s a strategy that has helped brilliant, powerful and wise people become better at what they do.\n","title":"Note 2","uri":"/notes/2020/change2/"},{"content":"Journaling is not just a little thing you do to pass the time, to write down your memories—though it can be—it’s a strategy that has helped brilliant, powerful and wise people become better at what they do.\n","title":"Note 3","uri":"/notes/2020/change3/"}]
